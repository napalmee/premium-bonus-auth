const express = require("express");
const router = express.Router();
const jwt = require("../services/jwt");
const axios = require("axios");

const SMS_CODES = new Map(); // { phone => code } (in-memory –¥–ª—è —Ç–µ—Å—Ç–æ–≤)

// –ü—Ä–æ–≤–µ—Ä–∫–∞ ‚Äî –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
router.post("/check", async (req, res) => {
  const { phone } = req.body;

  if (!phone) return res.status(400).json({ error: "Phone is required" });

  try {
    const { data } = await axios.post(
      `${process.env.PREMIUM_BONUS_API}/buyer-info`,
      { phone },
      {
        headers: {
          Authorization: process.env.PREMIUM_BONUS_TOKEN,
          "Content-Type": "application/json",
        },
      }
    );

    res.json({
      isRegistered: data?.is_registered ?? false,
    });
  } catch (err) {
    console.error("buyer-info error:", err.response?.data || err.message);
    res.status(500).json({ error: "Failed to check registration" });
  }
});

// –ó–∞–≥–ª—É—à–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ SMS ‚Äî –±–µ–∑–æ–ø–∞—Å–Ω–æ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
router.post("/send-code", async (req, res) => {
  const { phone } = req.body;
  if (!phone) return res.status(400).json({ error: "Phone is required" });

  const code = "1234"; // üîí —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥-–∑–∞–≥–ª—É—à–∫–∞
  console.log(`üì≤ MOCK SMS-–∫–æ–¥ –¥–ª—è ${phone}: ${code}`);

  SMS_CODES.set(phone, code);
  setTimeout(() => SMS_CODES.delete(phone), 5 * 60 * 1000); // expire in 5 –º–∏–Ω

  res.json({ success: true });
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞ –∏ –≤—ã–¥–∞—á–∞ JWT
router.post("/verify", async (req, res) => {
  const { phone, code } = req.body;
  if (!phone || !code) return res.status(400).json({ error: "Phone and code required" });

  const valid = SMS_CODES.get(phone);
  if (valid !== code) {
    return res.status(401).json({ error: "Invalid code" });
  }

  SMS_CODES.delete(phone);

  // –í—ã–¥–∞—á–∞ JWT (–Ω–∞ 30 –¥–Ω–µ–π)
  const token = jwt.sign({ phone }, process.env.JWT_SECRET, { expiresIn: "30d" });

  res.json({ token }); // üî• —Ñ—Ä–æ–Ω—Ç –æ–∂–∏–¥–∞–µ—Ç –∏–º–µ–Ω–Ω–æ —ç—Ç–æ
});

module.exports = router;
